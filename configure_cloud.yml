---
- name: "Deploy vSphere Cloud"
  hosts: "localhost"
  connection: "local"
  vars_files:
    - "generic.yml"
  vars:
    usable_networks: []
    create_dns_provider: "{{ (dns_config.service_domains|default([]))|length>0 }}"

  tasks:
    - name: "Create Avi IPAM Provider"
      vmware.alb.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: '{{ "VMware-IPAM-" + cloud_parameters.name }}'
        type: "IPAMDNS_TYPE_INTERNAL"
        allocate_ip_in_vrf: false
      register: ipamprovider

    - name: "Create Avi DNS Provider"
      vmware.alb.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: '{{ "VMware-DNS-" + cloud_parameters.name }}'
        type: IPAMDNS_TYPE_INTERNAL_DNS
        internal_profile:
          dns_service_domain: "{{ dns_config.service_domains }}"
      when: create_dns_provider

    - name: "Configure vSphere Cloud"
      vmware.alb.avi_cloud:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ cloud_parameters.name }}"
        vcenter_configuration:
          datacenter: "{{ cloud_parameters.datacenter }}"
          privilege: "WRITE_ACCESS"
          username: "{{ cloud_parameters.username }}"
          password: "{{ cloud_parameters.password }}"
          vcenter_url: "{{ cloud_parameters.vcenter }}"
          use_content_lib: "{{ cloud_config.use_content_lib | default(False) }}"
          content_lib: "{{ cloud_config.content_lib | default(omit) }}"
        vtype: "CLOUD_VCENTER"
        mgmt_ip_v6_enabled: "{{ cloud_parameters.mgmt_ip_v6_enabled | default(omit) }}"
        ipam_provider_ref: "{{ ipamprovider.obj.url }}"
        dns_provider_ref: '{{ "/api/ipamdnsproviderprofile/?name=VMware-DNS-" + cloud_parameters.name if create_dns_provider else None }}'
      register: cloud

    - name: "Wait for network sync for cloud to complete"
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "get"
        path: "cloudruntime"
        params:
          name: "{{ cloud_parameters.name }}"
      register: cloudruntime
      until: cloudruntime.obj.results[0].network_sync_complete
      retries: 30
      delay: 5

    - name: "Configure cloud management network"
      vmware.alb.avi_cloud:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_update_method: "patch"
        avi_api_patch_op: "replace"
        name: "{{ cloud_parameters.name }}"
        vcenter_configuration:
          management_ip_subnet: "{{ cloud_parameters.management_ip_subnet }}"
          management_network: '{{ "/api/vimgrnwruntime/?name=" + cloud_parameters.management_network }}'
        vtype: "CLOUD_VCENTER"

    - name: "Configure management default route"
      vmware.alb.avi_vrfcontext:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "management"
        cloud_ref: '{{ "/api/cloud/?name=" + cloud_parameters.name }}'
        static_routes:
          - next_hop:
              addr: "{{ cloud_parameters.management_gateway }}"
              type: "V4"
            prefix:
              ip_addr:
                addr: "0.0.0.0"
                type: "V4"
              mask: 0
            route_id: "1"

    - name: "Configure networks"
      vmware.alb.avi_network:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        cloud_ref: '{{ "/api/cloud/?name=" + cloud_parameters.name }}'
        dhcp_enabled: false
        ip6_autocfg_enabled: false
        exclude_discovered_subnets: true
        configured_subnets:
          - prefix:
              ip_addr:
                addr: "{{ item.addr }}"
                type: "V4"
              mask: "{{ item.mask }}"
            static_ip_ranges: "{{ item.static_ip_ranges | default(omit) }}"
            static_ranges: "{{ item.static_ranges | default(omit) }}"
      loop: "{{ ipam_config }}"

    - name: "Collate usable subnets"
      ansible.builtin.set_fact:
        # usable_networks: '{{ usable_networks + [{"nw_ref": "/api/network/?name=" + item.name}] }}'
        usable_networks: |
          {{ usable_networks + [{"nw_ref": lookup("vmware.alb.avi", avi_credentials=avi_credentials, obj_name=item.name,
          obj_type="network", params={"cloud_ref.uuid": cloud.obj.uuid, "fields": "url"}, wantlist=true)[0]["url"]}]}}
      when: item.add_to_ipam
      loop: "{{ ipam_config }}"

    - name: "Add usable subnets to IPAM"
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "patch"
        path: '{{ "ipamdnsproviderprofile/" + ipamprovider.obj.uuid }}'
        data:
          replace:
            internal_profile:
              usable_networks: "{{ usable_networks }}"

- name: "Configure Service Engine Groups"
  ansible.builtin.import_playbook: configure_segs.yml
