---
- name: "Deploy Controller in vCenter from Content Library"
  hosts: "localhost"
  connection: "local"
  vars_files:
    - "deployment_settings_cl.yml"
    - "generic.yml"
  tasks:
    - name: "Deploy Avi Controller VM"
      community.vmware.vmware_content_deploy_ovf_template:
        hostname: "{{ cloud_parameters.vcenter }}"
        username: "{{ cloud_parameters.username }}"
        password: "{{ cloud_parameters.password }}"
        datacenter: "{{ cloud_parameters.datacenter }}"
        cluster: "{{ cloud_parameters.cluster }}"
        datastore: "{{ cloud_parameters.datastore }}"
        name: "{{ controller_nodes[0].name }}"
        ovf_template: '{{ template_name }}'
        storage_provisioning: "thin"
        validate_certs: "no"
        folder: '{{ cloud_parameters.datacenter + "/vm/" + cloud_parameters.controller_folder }}'
      register: deploy_result
      ignore_errors: true
      failed_when: deploy_result.vm_deploy_info.vm_id is not defined

    - name: "Retrieve deployed VM info"
      community.vmware.vmware_guest_info:
        hostname: "{{ cloud_parameters.vcenter }}"
        username: "{{ cloud_parameters.username }}"
        password: "{{ cloud_parameters.password }}"
        datacenter: "{{ cloud_parameters.datacenter }}"
        moid: "{{ deploy_result.vm_deploy_info.vm_id }}"
        validate_certs: "no"
      register: controller_vm

    - name: "Check VM is not already powered on"
      ansible.builtin.fail:
        msg: "The Controller VM is powered on so aborting reconfiguration"
      when: controller_vm.instance.hw_power_status != "poweredOff"

    - name: "Reconfigure Controller VM"
      community.vmware.vmware_guest:
        hostname: "{{ cloud_parameters.vcenter }}"
        username: "{{ cloud_parameters.username }}"
        password: "{{ cloud_parameters.password }}"
        uuid: "{{ controller_vm.instance.instance_uuid }}"
        use_instance_uuid: true
        state: "present"
        cluster: "{{ cloud_parameters.cluster }}"
        hardware:
          num_cpus: "{{ controller_num_cpu }}"
          memory_mb: "{{ controller_mem * 1024 }}"
        disk:
          - size_gb: "{{ controller_disk }}"
        vapp_properties:
          - id: "avi.mgmt-ip.CONTROLLER"
            value: "{{ controller_nodes[0].ip.addr }}"
          - id: "avi.mgmt-mask.CONTROLLER"
            value: "{{ controller_mask }}"
          - id: "avi.default-gw.CONTROLLER"
            value: "{{ controller_gw }}"
        validate_certs: "no"

    - name: "Reconfigure Controller Networking"
      community.vmware.vmware_guest_network:
        hostname: "{{ cloud_parameters.vcenter }}"
        username: "{{ cloud_parameters.username }}"
        password: "{{ cloud_parameters.password }}"
        uuid: "{{ controller_vm.instance.instance_uuid }}"
        use_instance_uuid: true
        state: "present"
        name: "Management"
        mac_address: "{{ controller_vm.instance.hw_eth0.macaddress }}"
        network_name: "{{ cloud_parameters.controller_network }}"
        validate_certs: "no"

    - name: "Power on Controller vm"
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ cloud_parameters.vcenter }}"
        username: "{{ cloud_parameters.username }}"
        password: "{{ cloud_parameters.password }}"
        uuid: "{{ controller_vm.instance.instance_uuid }}"
        use_instance_uuid: true
        state: "powered-on"
        validate_certs: "no"

    - name: "Wait for Controller to be up"
      ansible.builtin.uri:
        url: '{{ "https://" + controller_nodes[0].ip.addr + "/api/cluster/runtime" }}'
        return_content: "yes"
        validate_certs: "no"
      delegate_to: "localhost"
      register: result
      until: "result.content.find('CLUSTER_UP') != -1"
      retries: 20
      delay: 30

- name: "Bootstrap"
  ansible.builtin.import_playbook: bootstrap.yml
  when: no_bootstrap is undefined

- name: "Configure Cluster"
  ansible.builtin.import_playbook: configure_cluster.yml
  when: no_bootstrap is undefined

- name: "Configure System Settings"
  ansible.builtin.import_playbook: configure_system_settings.yml
  when: no_bootstrap is undefined

- name: "Configure License"
  ansible.builtin.import_playbook: configure_license.yml
  when: no_bootstrap is undefined

- name: "Configure SSL Certificates"
  ansible.builtin.import_playbook: configure_sslcerts.yml
  when: no_bootstrap is undefined

- name: "Configure Portal Certificate"
  ansible.builtin.import_playbook: configure_portal_cert.yml
  when: no_bootstrap is undefined

- name: "Configure vCenter Cloud"
  ansible.builtin.import_playbook: configure_cloud.yml
  when: no_bootstrap is undefined

- name: "Configure DNS Service"
  ansible.builtin.import_playbook: configure_dns.yml
  when: no_bootstrap is undefined

- name: "Create Profiles"
  ansible.builtin.import_playbook: create_profiles.yml
  when: no_bootstrap is undefined

- name: "Create Virtual Service"
  ansible.builtin.import_playbook: create_vs.yml
  when: no_bootstrap is undefined

- name: "GSLB Service Account Creation"
  ansible.builtin.import_playbook: create_gslb_account.yml
  when: no_bootstrap is undefined and gslb_member is defined
