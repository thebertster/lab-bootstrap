---
- name: "Deploy Controller in vCenter"
  hosts: all
  vars_files:
    - "deployment_settings.yml"
    - "generic.yml"
  vars:
    build_path: '{{ "/mnt/" + (build_location | default("builds")) + "/" }}'
  tasks:
    - name: "Deploy Avi Controller"
      community.vmware.vmware_deploy_ovf:
        hostname: "{{ cloud_parameters.vcenter }}"
        username: "{{ cloud_parameters.username }}"
        password: "{{ cloud_parameters.password }}"
        datacenter: "{{ cloud_parameters.datacenter }}"
        cluster: "{{ cloud_parameters.cluster }}"
        datastore: "{{ cloud_parameters.datastore }}"
        name: "{{ controller_name }}"
        networks: '{u"Management":u"{{ cloud_parameters.controller_network }}"}'
        ovf: '{{ build_path + controller_version + "/" + build_name + "/controller.ova" }}'
        disk_provisioning: "thin"
        validate_certs: "no"
        folder: '{{ cloud_parameters.datacenter + "/vm/" + cloud_parameters.controller_folder }}'
        properties: |
          { u"avi.mgmt-ip.CONTROLLER":u"{{ controller_ip }}",
          u"avi.mgmt-mask.CONTROLLER":u"{{ controller_mask }}",
          u"avi.default-gw.CONTROLLER":u"{{ controller_gw }}"}
        power_on: "no"
        allow_duplicates: "no"
      register: controller_vm

    - name: "Reconfigure Controller VM"
      community.vmware.vmware_guest:
        hostname: "{{ cloud_parameters.vcenter }}"
        username: "{{ cloud_parameters.username }}"
        password: "{{ cloud_parameters.password }}"
        uuid: "{{ controller_vm.instance['instance_uuid'] }}"
        use_instance_uuid: true
        state: "present"
        hardware:
          num_cpus: "{{ controller_num_cpu }}"
          memory_mb: "{{ controller_mem * 1024 }}"
        disk:
          - size_gb: "{{ controller_disk }}"
        validate_certs: "no"

    - name: "Power on Controller vm"
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ cloud_parameters.vcenter }}"
        username: "{{ cloud_parameters.username }}"
        password: "{{ cloud_parameters.password }}"
        uuid: "{{ controller_vm.instance['instance_uuid'] }}"
        use_instance_uuid: true
        state: "powered-on"
        validate_certs: "no"

    - name: "Wait for Controller to be up..."
      ansible.builtin.uri:
        url: '{{ "https://" + controller_ip + "/api/cluster/runtime" }}'
        return_content: "yes"
        validate_certs: "no"
      delegate_to: "localhost"
      register: result
      until: "result.content.find('CLUSTER_UP') != -1"
      retries: 20
      delay: 30

- name: "Bootstrap"
  ansible.builtin.import_playbook: bootstrap.yml
  when: no_bootstrap is undefined

- name: "Configure License"
  ansible.builtin.import_playbook: configure_license.yml
  when: no_bootstrap is undefined

- name: "Configure SSL Certificates"
  ansible.builtin.import_playbook: configure_sslcerts.yml
  when: no_bootstrap is undefined

- name: "Configure Portal Certificate"
  ansible.builtin.import_playbook: configure_portal_cert.yml
  when: no_bootstrap is undefined

- name: "Configure vCenter Cloud"
  ansible.builtin.import_playbook: configure_cloud.yml
  when: no_bootstrap is undefined

- name: "Configure DNS Service"
  ansible.builtin.import_playbook: configure_dns.yml
  when: no_bootstrap is undefined

- name: "Create Persistence Profile"
  ansible.builtin.import_playbook: create_persistence.yml
  when: no_bootstrap is undefined

- name: "Create Virtual Service"
  ansible.builtin.import_playbook: create_vs.yml
  when: no_bootstrap is undefined
